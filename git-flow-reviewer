#
# git-flow -- A collection of Git extensions to provide high-level
# repository operations for Vincent Driessen's branching model.
#
# Original blog post presenting this model is found at:
#    http://nvie.com/git-model
#
# Feel free to contribute to this project at:
#    http://github.com/nvie/gitflow
#
# Copyright 2010 Vincent Driessen. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Vincent Driessen.
#

init() {
  require_git_repo
  require_gitflow_initialized
  gitflow_load_settings
  REVIEWERS_STR=$(git config --get gitflow.gitlab.reviewers)
}

usage() {
	echo "usage: git flow reviewer [list]"
	echo "       git flow reviewer add <name>"
    echo "       git flow reviewer remove <name>"
}

cmd_help() {
	usage
	exit 0
}

cmd_default() {
	cmd_list "$@"
}

cmd_list() {
    if [ -z "${REVIEWERS_STR}" -a "${REVIEWERS_STR}" != " " ]; then
        echo -e "No reviewers yet. Run \e[37mgit flow reviewer add Name\e[0m to add new reviewer"
        exit 0
    fi
    IFS=","
    read -a REVIEWERS <<< "${REVIEWERS_STR}"
    echo "List of reviewers:"
    for rev in ${REVIEWERS[@]}; do
        echo "${rev}"
    done
}

cmd_add() {
    if [ "$#" -ne 1 ]; then
        die "Error: Should be one argument - name of reviewer"
    fi
    if [[ $1 == *,* ]] || [[ $1 == *\;* ]]; then
        die "Error: Name should not contain commas or semicolons"
    fi
    NAME=`echo "$1" | sed 's/\s/%20/g'`
    gitlab_url=$(git config --get gitflow.gitlab.url)
    gitlab_token=$(git config --get gitflow.gitlab.token)
    gitlab_request "GET" "api/v3/users?search=${NAME}" RESPONSE_RAW
    USER_ID=`echo "$RESPONSE_RAW" | sed 's/.*"id":\([0-9]*\).*/\1/'`
    if [ -z "${USER_ID}" -a "${USER_ID}" != " " ]; then
        die "No such user found"
    fi
    if [ ${#REVIEWERS_STR} -gt 0 ]; then
        REVIEWERS_STR="${REVIEWERS_STR},"
    fi
    REVIEWERS_STR="${REVIEWERS_STR}$1;${USER_ID}"
    git_do config gitflow.gitlab.reviewers "$REVIEWERS_STR"
    echo "Reviewer $1 added, user id is ${USER_ID}"
}

cmd_remove() {
    if [ "$#" -ne 1 ]; then
        die "Error: Should be one argument - name of reviewer"
    fi
    if [[ $1 == *,* ]] || [[ $1 == *\;* ]]; then
        die "Error: Name should not contain commas"
    fi
    OLD_STR="${REVIEWERS_STR}"
    REVIEWERS_STR=`echo ${REVIEWERS_STR} | sed "s/,$1;[0-9]*//g" | sed "s/$1;[0-9]*,//g" | sed "s/$1;[0-9]*//g"`
    if [ "${OLD_STR}" != "${REVIEWERS_STR}" ]; then
        git_do config gitflow.gitlab.reviewers "$REVIEWERS_STR"
        echo "Reviewer $1 removed"
    else
        die "Reviewer $1 not found"
    fi
}
